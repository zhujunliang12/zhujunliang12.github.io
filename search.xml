<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>docker介绍</title>
    <url>/2021/01/23/Docker%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>学习目标：</p>
<ul>
<li><p>掌握Docker基础知识，能够理解Docker镜像与容器的概念</p>
</li>
<li><p>完成Docker安装与启动</p>
</li>
<li><p>掌握Docker镜像与容器相关命令</p>
</li>
<li><p>掌握Tomcat Nginx 等软件的常用应用的安装</p>
</li>
<li><p>掌握docker迁移与备份相关命令</p>
</li>
<li><p>能够运用Dockerfile编写创建容器的脚本</p>
</li>
<li><p>能够搭建与使用docker私有仓库</p>
</li>
</ul>
<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-什么是虚拟化"><a href="#1-1-什么是虚拟化" class="headerlink" title="1.1 什么是虚拟化"></a>1.1 什么是虚拟化</h2><p>​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p>
<p>​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p>
<p>​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p>
<h2 id="1-2-什么是Docker"><a href="#1-2-什么是Docker" class="headerlink" title="1.2 什么是Docker"></a>1.2 什么是Docker</h2><p>​    Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker">GitHub</a> 上进行维护。</p>
<p>​    <img src="image/1-3.png"></p>
<p>​    Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p>
<p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p>
<p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p>
<p>为什么选择Docker?</p>
<p>（1）上手快。</p>
<p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。</p>
<p>         随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</p>
<p>（2）职责的逻辑分类</p>
<p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p>
<p>（3）快速高效的开发生命周期</p>
<p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p>
<p>（4）鼓励使用面向服务的架构</p>
<p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p>
<h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>​    下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p>
<p><img src="image/1-1.png"></p>
<p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p>
<h2 id="1-4-Docker-组件"><a href="#1-4-Docker-组件" class="headerlink" title="1.4 Docker 组件"></a>1.4 Docker 组件</h2><h3 id="1-4-1-Docker服务器与客户端"><a href="#1-4-1-Docker服务器与客户端" class="headerlink" title="1.4.1 Docker服务器与客户端"></a>1.4.1 Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p>
<p><img src="image/1-2.png"></p>
<h3 id="1-4-2-Docker镜像与容器"><a href="#1-4-2-Docker镜像与容器" class="headerlink" title="1.4.2 Docker镜像与容器"></a>1.4.2 Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p>
<p>添加一个文件；</p>
<p>执行一个命令；</p>
<p>打开一个窗口。</p>
<p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p>
<p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p>
<p>所以Docker容器就是：</p>
<p>​    一个镜像格式；</p>
<p>​    一些列标准操作；</p>
<p>​    一个执行环境。</p>
<p>​    Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p>
<p>         和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p>
<p>         Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p>
<h3 id="1-4-3-Registry（注册中心）"><a href="#1-4-3-Registry（注册中心）" class="headerlink" title="1.4.3 Registry（注册中心）"></a>1.4.3 Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p>
<p>​    <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p>
<p>​    由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p>
<p>​    请直接挂载课程配套的Centos7.x镜像</p>
<p>（1）yum 包更新到最新</p>
<pre><code>sudo yum update</code></pre>
<p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre>
<p>（3）设置yum源为阿里云</p>
<pre><code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre>
<p>（4）安装docker</p>
<pre><code>sudo yum install docker-ce</code></pre>
<p>（5）安装后查看docker版本</p>
<pre><code>docker -v</code></pre>
<h2 id="2-2-设置ustc的镜像"><a href="#2-2-设置ustc的镜像" class="headerlink" title="2.2 设置ustc的镜像"></a>2.2 设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p>
<p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p>
<p>编辑该文件：</p>
<pre><code>vi /etc/docker/daemon.json </code></pre>
<p>在该文件中输入如下内容：</p>
<pre><code>&#123;
&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]
&#125;</code></pre>
<h2 id="2-3-Docker的启动与停止"><a href="#2-3-Docker的启动与停止" class="headerlink" title="2.3 Docker的启动与停止"></a>2.3 Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p>
<p>启动docker：</p>
<pre><code>systemctl start docker</code></pre>
<p>停止docker：</p>
<pre><code>systemctl stop docker</code></pre>
<p>重启docker：</p>
<pre><code>systemctl restart docker</code></pre>
<p>查看docker状态：</p>
<pre><code>systemctl status docker</code></pre>
<p>开机启动：</p>
<pre><code>systemctl enable docker</code></pre>
<p>查看docker概要信息</p>
<pre><code>docker info</code></pre>
<p>查看docker帮助文档</p>
<pre><code>docker --help</code></pre>
<h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><h2 id="3-1-镜像相关命令"><a href="#3-1-镜像相关命令" class="headerlink" title="3.1 镜像相关命令"></a>3.1 镜像相关命令</h2><h3 id="3-1-1-查看镜像"><a href="#3-1-1-查看镜像" class="headerlink" title="3.1.1 查看镜像"></a>3.1.1 查看镜像</h3><pre><code>docker images</code></pre>
<p>REPOSITORY：镜像名称</p>
<p>TAG：镜像标签</p>
<p>IMAGE ID：镜像ID</p>
<p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p>
<p>SIZE：镜像大小</p>
<p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p>
<h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p>
<pre><code>docker search 镜像名称</code></pre>
<p>NAME：仓库名称</p>
<p>DESCRIPTION：镜像描述</p>
<p>STARS：用户评价，反应一个镜像的受欢迎程度</p>
<p>OFFICIAL：是否官方</p>
<p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p>
<h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p>
<pre><code>docker pull 镜像名称</code></pre>
<p>例如，我要下载centos7镜像</p>
<pre><code>docker pull centos:7</code></pre>
<h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p>
<pre><code>docker rmi 镜像ID</code></pre>
<p>删除所有镜像</p>
<pre><code>docker rmi `docker images -q`</code></pre>
<h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p>查看正在运行的容器</p>
<pre><code>docker ps</code></pre>
<p>查看所有容器</p>
<pre><code>docker ps –a</code></pre>
<p>查看最后一次运行的容器</p>
<pre><code>docker ps –l</code></pre>
<p>查看停止的容器</p>
<pre><code>docker ps -f status=exited</code></pre>
<h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>创建容器常用的参数说明：</p>
<p>创建容器命令：docker run</p>
<p> -i：表示运行容器</p>
<p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p>
<p> –name :为创建的容器命名。</p>
<p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p>
<p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p>
<p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p>
<p>（1）交互式方式创建容器</p>
<pre><code>docker run -it --name=容器名称 镜像名称:标签 /bin/bash</code></pre>
<p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p>
<p>退出当前容器</p>
<pre><code>exit</code></pre>
<p>（2）守护式方式创建容器：</p>
<pre><code>docker run -di --name=容器名称 镜像名称:标签</code></pre>
<p>登录守护式容器方式：</p>
<pre><code>docker exec -it 容器名称 (或者容器ID)  /bin/bash</code></pre>
<h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p>停止容器：</p>
<pre><code>docker stop 容器名称（或者容器ID）</code></pre>
<p>启动容器：</p>
<pre><code>docker start 容器名称（或者容器ID）</code></pre>
<h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p>
<pre><code>docker cp 需要拷贝的文件或目录 容器名称:容器目录</code></pre>
<p>也可以将文件从容器内拷贝出来</p>
<pre><code>docker cp 容器名称:容器目录 需要拷贝的文件或目录</code></pre>
<h3 id="3-2-5-目录挂载"><a href="#3-2-5-目录挂载" class="headerlink" title="3.2.5 目录挂载"></a>3.2.5 目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p>
<pre><code>docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</code></pre>
<p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p>
<p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p>
<h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p>
<pre><code>docker inspect 容器名称（容器ID） </code></pre>
<p>也可以直接执行下面的命令直接输出IP地址</p>
<pre><code>docker inspect --format=&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称（容器ID）</code></pre>
<h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p>
<pre><code>docker rm 容器名称（容器ID）</code></pre>
<h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p>（1）拉取mysql镜像</p>
<pre><code>docker pull centos/mysql-57-centos7</code></pre>
<p>（2）创建容器</p>
<pre><code>docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre>
<p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p>
<p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p>
<p>（3）远程登录mysql</p>
<p>连接宿主机的IP  ,指定端口为33306</p>
<h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p>
<pre><code>docker pull tomcat:7-jre7</code></pre>
<p>（2）创建容器</p>
<p>创建容器  -p表示地址映射</p>
<pre><code>docker run -di --name=mytomcat -p 9000:8080 -v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7</code></pre>
<h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像</p>
<pre><code>docker pull nginx</code></pre>
<p>（2）创建Nginx容器</p>
<pre><code>docker run -di --name=mynginx -p 80:80 nginx</code></pre>
<h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p>
<pre><code>docker pull redis</code></pre>
<p>（2）创建容器</p>
<pre><code>docker run -di --name=myredis -p 6379:6379 redis</code></pre>
<h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p>
<pre><code>docker commit mynginx mynginx_i</code></pre>
<h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p>
<pre><code>docker  save -o mynginx.tar mynginx_i</code></pre>
<h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p>
<pre><code>docker load -i mynginx.tar</code></pre>
<p>-i 输入的文件</p>
<p>执行后再次查看镜像，可以看到镜像已经恢复</p>
<h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6 Dockerfile"></a>6 Dockerfile</h1><h2 id="6-1-什么是Dockerfile"><a href="#6-1-什么是Dockerfile" class="headerlink" title="6.1 什么是Dockerfile"></a>6.1 什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p>
<p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p>
<h2 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>FROM image_name:tag</td>
<td>定义了使用哪个基础镜像启动构建流程</td>
</tr>
<tr>
<td>MAINTAINER user_name</td>
<td>声明镜像的创建者</td>
</tr>
<tr>
<td>ENV key value</td>
<td>设置环境变量 (可以写多条)</td>
</tr>
<tr>
<td>RUN command</td>
<td>是Dockerfile的核心部分(可以写多条)</td>
</tr>
<tr>
<td>ADD source_dir/file dest_dir/file</td>
<td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td>
</tr>
<tr>
<td>COPY source_dir/file dest_dir/file</td>
<td>和ADD相似，但是如果有压缩文件并不能解压</td>
</tr>
<tr>
<td>WORKDIR path_dir</td>
<td>设置工作目录</td>
</tr>
</tbody></table>
<h2 id="6-3-使用脚本创建镜像"><a href="#6-3-使用脚本创建镜像" class="headerlink" title="6.3 使用脚本创建镜像"></a>6.3 使用脚本创建镜像</h2><p>步骤：</p>
<p>（1）创建目录</p>
<pre><code>mkdir –p /usr/local/dockerjdk8</code></pre>
<p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p>
<p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p>
<pre><code>#依赖镜像名称和ID
FROM centos:7
#指定镜像创建者信息
MAINTAINER ITCAST
#切换工作目录
WORKDIR /usr
RUN mkdir  /usr/local/java
#ADD 是相对路径jar,把java添加到容器中
ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/

#配置java环境变量
ENV JAVA_HOME /usr/local/java/jdk1.8.0_171
ENV JRE_HOME $JAVA_HOME/jre
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH
ENV PATH $JAVA_HOME/bin:$PATH</code></pre>
<p>（4）执行命令构建镜像</p>
<pre><code>docker build -t=&#39;jdk1.8&#39; .</code></pre>
<p>注意后边的空格和点，不要省略</p>
<p>（5）查看镜像是否建立完成</p>
<pre><code>docker images</code></pre>
<h1 id="7-Docker私有仓库"><a href="#7-Docker私有仓库" class="headerlink" title="7 Docker私有仓库"></a>7 Docker私有仓库</h1><h2 id="7-1-私有仓库搭建与配置"><a href="#7-1-私有仓库搭建与配置" class="headerlink" title="7.1 私有仓库搭建与配置"></a>7.1 私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p>
<pre><code>docker pull registry</code></pre>
<p>（2）启动私有仓库容器</p>
<pre><code>docker run -di --name=registry -p 5000:5000 registry</code></pre>
<p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog%E7%9C%8B%E5%88%B0%60%7B&quot;repositories&quot;:[]%7D%60">http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空<br><a href="http://www.prochina.club:5000/v2/_catalog">http://www.prochina.club:5000/v2/_catalog</a></p>
<p>（4）修改daemon.json</p>
<pre><code>vi /etc/docker/daemon.json</code></pre>
<p>添加以下内容，保存退出。</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"insecure-registries"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"192.168.184.141:5000"</span><span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>此步用于让 docker信任私有仓库地址</p>
<p>（5）重启docker 服务</p>
<pre><code>systemctl restart docker</code></pre>
<h2 id="7-2-镜像上传至私有仓库"><a href="#7-2-镜像上传至私有仓库" class="headerlink" title="7.2 镜像上传至私有仓库"></a>7.2 镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p>
<pre><code>docker tag jdk1.8 192.168.184.141:5000/jdk1.8</code></pre>
<p>（2）再次启动私服容器</p>
<pre><code>docker start registry</code></pre>
<p>（3）上传标记的镜像</p>
<pre><code>docker push 192.168.184.141:5000/jdk1.8</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/01/29/java%E5%90%8E%E5%8F%B0%20%E8%AE%A1%E7%AE%97%E8%AF%B7%E5%81%87%E6%97%B6%E9%97%B4%EF%BC%88%E5%88%A4%E6%96%AD%E4%BA%86%E5%91%A8%E5%85%AD%E5%91%A8%E6%9C%AB%E5%92%8C%E6%B3%95%E5%AE%9A%E8%8A%82%E5%81%87%E6%97%A5%E5%92%8C%E5%9B%BD%E5%AE%B6%E8%B0%83%E4%BC%91%EF%BC%89/</url>
    <content><![CDATA[<p><strong>目录</strong></p>
<p><a href="#t0">1.假设上班时间如下：</a></p>
<p><a href="#t1">2.请假时间计算方式：</a></p>
<p><a href="#t2">3.请假可能存在的情况：</a></p>
<p><a href="#t3">4.实现思路：</a></p>
<p><a href="#t4">5.代码奉上，只需传入时间参数</a></p>
<hr>
<h3 id="1-假设上班时间如下："><a href="#1-假设上班时间如下：" class="headerlink" title="1.假设上班时间如下："></a><strong>1.假设上班时间如下：</strong></h3><blockquote>
<ol>
<li>   上班时间为：08:30:00</li>
<li>   中午休息时间为：12:00:00 到13:30:00</li>
<li>   下班时间：18:00:00</li>
<li>   每次请假必须至少请假半天（例如：08:30到12:00算0.5天   12:00到18:00算0.5天） 以上  </li>
<li>   支持2019和2020年国家法定节假日，其他年份请自行添加</li>
</ol>
</blockquote>
<h3 id="2-请假时间计算方式："><a href="#2-请假时间计算方式：" class="headerlink" title="2.请假时间计算方式："></a><strong>2.请假时间计算方式：</strong></h3><p>  <strong>任选</strong>两个时间段（无论是从周末、国家节假日开始请假  到  周末、国家节假日结束请假  <strong>都支持</strong>） </p>
<p>    2.1.去掉周六周末（但是国家调休的有些班是在周六周末 所以要做判断，如果周六或者周末 是国家规定调休的班，那么就不能去掉，否则去掉）</p>
<p>    2.2.去掉国家法定节假日</p>
<h3 id="3-请假可能存在的情况："><a href="#3-请假可能存在的情况：" class="headerlink" title="3.请假可能存在的情况："></a><strong>3.请假可能存在的情况：</strong></h3><p>   3.1. 请假日期和结束日期相同（同一天）  例如：2019-12-<strong>10</strong> 08:30:00  -  2019-12-<strong>10</strong> 12:00:00   </p>
<p>   3.2 .请假日期和结束日期相邻（相邻的两天）例如：2019-12-<strong>10</strong> 08:30:00  -  2019-12-<strong>11</strong> 12:00:00</p>
<p>   3.3.请假日期和结束日期不相邻（中间有间隔）例如：2019-12-<strong>10</strong> 08:30:00  -  2019-12-<strong>13</strong> 12:00:00</p>
<h3 id="4-实现思路："><a href="#4-实现思路：" class="headerlink" title="4.实现思路："></a><strong>4.实现思路：</strong></h3><p> <strong>分三部分计算各自的请假时间，相加即可</strong></p>
<p> <strong>第一部分：请假的当天的请假总时间（要么是半天，要么是一天）</strong></p>
<p> <strong>第二部分：请假的中间的请假总时间（不包含第一部分和第三部分）</strong> </p>
<p> <strong>第三部分：结束的当天的请假总时间（要么是半天，要么是一天）</strong></p>
<h3 id="5-代码奉上，只需传入时间参数"><a href="#5-代码奉上，只需传入时间参数" class="headerlink" title="5.代码奉上，只需传入时间参数"></a><strong>5.代码奉上，只需传入时间参数</strong></h3><pre><code>/**     * @param startTime Java接受的格式：Sun Dec 08 08:30:00 GMT+08:00 2019        *                 前端传的格式是  2019-12-08 08:30:00     *                                                     * @param endTime   和startTime格式是一样的     *      * @return 返回Map对象   key:leaveDays   value:就是计算结果     *      *  代码比较新鲜，没有来得及做重构，欢迎大家重构     * @throws Exception     */    @RequestMapping(value = &quot;calcLeaveTime&quot;)    @ResponseBody    public Map&lt;String,String&gt; calcLeaveTime(Date startTime,Date endTime) throws Exception &#123;        String goWorkTimeString=&quot;08:30:00&quot;;        String midWorkTimeString=&quot;12:00:00&quot;;        String endWorkTimeString=&quot;18:00:00&quot;;                String[] legalHolidays2019= &#123;//2019国家规定的法定节假日                &quot;2019-01-01&quot;, &quot;2019-02-04&quot;, &quot;2019-02-05&quot;, &quot;2019-02-06&quot;, &quot;2019-02-07&quot;,                 &quot;2019-02-08&quot;,&quot;2019-02-09&quot;, &quot;2019-02-10&quot;,&quot;2019-04-05&quot;, &quot;2019-04-06&quot;,                 &quot;2019-04-07&quot;, &quot;2019-05-01&quot;, &quot;2019-06-07&quot;, &quot;2019-06-08&quot;, &quot;2019-06-09&quot;,                 &quot;2019-09-13&quot;, &quot;2019-09-14&quot;, &quot;2019-09-15&quot;, &quot;2019-10-01&quot;, &quot;2019-10-02&quot;,                 &quot;2019-10-03&quot;, &quot;2019-10-04&quot;, &quot;2019-10-05&quot;, &quot;2019-10-06&quot;, &quot;2019-10-07&quot;        &#125;;        String[] T2019= &#123;//2019国家规定需要调休的班                &quot;2019-02-02&quot;,&quot;2019-02-03&quot;,&quot;2019-09-29&quot;,&quot;2019-10-12&quot;                    &#125;;        String[] legalHolidays2020= &#123;//2020国家规定的法定节假日                &quot;2020-01-01&quot;,&quot;2020-01-24&quot;,&quot;2020-01-25&quot;,&quot;2020-01-26&quot;,&quot;2020-01-27&quot;,                &quot;2020-01-28&quot;,&quot;2020-01-29&quot;,&quot;2020-01-30&quot;,&quot;2020-04-04&quot;,&quot;2020-04-05&quot;,                &quot;2020-04-06&quot;,&quot;2020-05-01&quot;,&quot;2020-05-02&quot;,&quot;2020-05-03&quot;,&quot;2020-05-04&quot;,                &quot;2020-05-05&quot;,&quot;2020-06-25&quot;,&quot;2020-06-26&quot;,&quot;2020-06-27&quot;,&quot;2020-10-01&quot;,                &quot;2020-10-02&quot;,&quot;2020-10-03&quot;,&quot;2020-10-04&quot;,&quot;2020-10-05&quot;,&quot;2020-10-06&quot;,                &quot;2020-10-07&quot;,&quot;2020-10-08&quot;        &#125;;        String[] T2020= &#123;//2020国家规定需要调休的班                &quot;2020-01-19&quot;,&quot;2020-02-01&quot;,&quot;2020-04-26&quot;,&quot;2020-05-09&quot;,&quot;2020-06-28&quot;,                &quot;2020-09-27&quot;,&quot;2020-10-10&quot;                        &#125;;         Map&lt;String, String&gt; map=new HashMap&lt;String, String&gt;();        SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);        String sStartDate= sdf.format(startTime);        String sEndDate = sdf.format(endTime);                String[] legalHolidays= &#123;&#125;;        String[] tiaoxiudays= &#123;&#125;;                System.out.println(&quot;传入的请假时间:&quot;+sStartDate+&quot; &quot;+sEndDate);         List&lt;Date&gt; lstDays=new ArrayList&lt;Date&gt;();                Date startD=sdf.parse(sStartDate);        Date endD=sdf.parse(sEndDate);        Date newstartD=null;        Date newendD=null;        Date date=startD;                Calendar cal=Calendar.getInstance();        cal.setTime(startD);        int i = cal.get(Calendar.DAY_OF_WEEK);        while (date.equals(endD)||date.before(endD)) &#123;            int iFiled=cal.get(Calendar.DAY_OF_WEEK);            String strDateString= sdf.format(date);            String strCurrentYear=String.valueOf(Calendar.getInstance().get(Calendar.YEAR));            String strDateYear=sdf.format(date).split(&quot;-&quot;)[0];            legalHolidays=strDateYear.equals(strCurrentYear)?legalHolidays2019:legalHolidays2020;            tiaoxiudays=strDateYear.equals(strCurrentYear)?T2019:T2020;                                    if((iFiled==Calendar.SATURDAY||iFiled==Calendar.SUNDAY||                                    Arrays.asList(legalHolidays).contains(strDateString))                      &amp;&amp;!Arrays.asList(tiaoxiudays).contains(strDateString)) &#123;                //这里就是做的周六周末和国家法定节假日的过滤            &#125;else &#123;                lstDays.add(date);            &#125;            cal.add(Calendar.DATE, 1);            date=cal.getTime();        &#125;                SimpleDateFormat sdfTime=new SimpleDateFormat(&quot;HH:mm:ss&quot;);        String sStartTime= &quot;&quot;;        String sEndTime = &quot;&quot;;                if(lstDays.size()&gt;0) &#123;//除过节假日后的请假天            newstartD=lstDays.get(0);            newendD=lstDays.size()==1?newendD=lstDays.get(0):lstDays.get(lstDays.size()-1);             //新的开始天和原来的开始天是一样的，那就用原来的请假开始时间  否则就用早上上班时间            sStartTime=newstartD.equals(startD)?sdfTime.format(startTime):goWorkTimeString;            //新的结束天和原来的结束天是一样的，那就用原来的请假结束时间  否则就用下午下班时间            sEndTime=newendD.equals(endD)?sdfTime.format(endTime):endWorkTimeString;         &#125;else &#123;            System.out.println(&quot;请假时间属于国家法定假节日或周六周末，不计算&quot;);            map.put(&quot;leaveDays&quot;, &quot;0&quot;);            return map;        &#125;                    Boolean sameDayBoolean=newstartD.equals(newendD);//判断是否是同一天        Double leaveDays=0.0;        if(sameDayBoolean) &#123;//同一天的情况                System.out.println(&quot;同一天计算方式&quot;);            Integer startInteger= Integer.parseInt(sStartTime.split(&quot;:&quot;)[0]);            Integer endInteger= Integer.parseInt(sEndTime.split(&quot;:&quot;)[0]);                        String resultString=String.valueOf(endInteger-startInteger);            switch (resultString) &#123;                case &quot;4&quot;:                case &quot;6&quot;:                    leaveDays+=0.5;                    break;                case &quot;10&quot;:                    leaveDays+=1;                    break;                default:                    break;            &#125;        &#125;else &#123;//不同一天            Date sStDate=newstartD;            Calendar clCalendar=Calendar.getInstance();            clCalendar.setTime(sStDate);            clCalendar.add(Calendar.DATE, 1);            Date newStDate=clCalendar.getTime();            if(newStDate.equals(newendD)) &#123;//相邻天的情况                System.out.println(&quot;相邻天无间隔计算方式&quot;);                Integer startInteger= Integer.parseInt(sStartTime.split(&quot;:&quot;)[0]);                Integer endInteger= Integer.parseInt(sEndTime.split(&quot;:&quot;)[0]);                                    String resultString=String.valueOf(endInteger-startInteger);                    switch (resultString) &#123;                    case &quot;0&quot;:                        leaveDays+=1;                        break;                    case &quot;4&quot;:                    case &quot;6&quot;:                        leaveDays+=1.5;                        break;                    case &quot;10&quot;:                        leaveDays+=2;                        break;                    default:                        break;                    &#125;                                &#125;else &#123;//中间有跨天情况                System.out.println(&quot;有间隔计算方式&quot;);                for (int j = 1; j &lt; lstDays.size()-1; j++) &#123;                    leaveDays+=1;                &#125;                Integer startInteger= Integer.parseInt(sStartTime.split(&quot;:&quot;)[0]);                            switch (startInteger.toString()) &#123;                    case &quot;8&quot;:                        leaveDays+=1;                        break;                    case &quot;12&quot;:                        leaveDays+=0.5;                        break;                    case &quot;18&quot;:                        leaveDays+=0;                        break;                    default:                        break;                &#125;                Integer endInteger= Integer.parseInt(sEndTime.split(&quot;:&quot;)[0]);                switch (endInteger.toString()) &#123;                    case &quot;8&quot;:                        leaveDays+=0;                        break;                    case &quot;12&quot;:                        leaveDays+=0.5;                        break;                    case &quot;18&quot;:                        leaveDays+=1;                        break;                    default:                        break;                &#125;            &#125;        &#125;        map.put(&quot;leaveDays&quot;, leaveDays.toString());        return map;    &#125;</code></pre>
]]></content>
  </entry>
</search>
